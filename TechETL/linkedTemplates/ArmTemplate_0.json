{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "TechETL"
		},
		"AzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1'"
		},
		"AzurePostgreSql1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'AzurePostgreSql1'"
		},
		"AzureSqlDatabase1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'AzureSqlDatabase1'"
		},
		"CosmosDbNoSql1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'CosmosDbNoSql1'"
		},
		"CosmosDbNoSql2TechCustomer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'CosmosDbNoSql2TechCustomer'"
		},
		"ProjectWarehouse_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'ProjectWarehouse'"
		},
		"AzurePostgreSql1_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "citus324.postgres.database.azure.com"
		},
		"AzurePostgreSql1_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "postgres"
		},
		"AzurePostgreSql1_properties_typeProperties_username": {
			"type": "string",
			"defaultValue": "citus"
		},
		"AzureSqlDatabase1_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "citus111.database.windows.net"
		},
		"AzureSqlDatabase1_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "GlobalTechWarehouse"
		},
		"AzureSqlDatabase1_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "citus"
		},
		"ProjectWarehouse_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "citus331.database.windows.net"
		},
		"ProjectWarehouse_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "ProjectFinals"
		},
		"ProjectWarehouse_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "citus"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzurePostgreSql1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzurePostgreSql",
				"version": "2.0",
				"typeProperties": {
					"server": "[parameters('AzurePostgreSql1_properties_typeProperties_server')]",
					"port": "5432",
					"database": "[parameters('AzurePostgreSql1_properties_typeProperties_database')]",
					"sslMode": 2,
					"username": "[parameters('AzurePostgreSql1_properties_typeProperties_username')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('AzurePostgreSql1_password')]"
					},
					"authenticationType": "Basic"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('AzureSqlDatabase1_properties_typeProperties_server')]",
					"database": "[parameters('AzureSqlDatabase1_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('AzureSqlDatabase1_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('AzureSqlDatabase1_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CosmosDbNoSql1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "CosmosDb",
				"typeProperties": {
					"connectionString": "[parameters('CosmosDbNoSql1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CosmosDbNoSql2TechCustomer')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "message IDs",
				"annotations": [],
				"type": "CosmosDb",
				"typeProperties": {
					"connectionString": "[parameters('CosmosDbNoSql2TechCustomer_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProjectWarehouse')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('ProjectWarehouse_properties_typeProperties_server')]",
					"database": "[parameters('ProjectWarehouse_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('ProjectWarehouse_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('ProjectWarehouse_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CosmosDbNoSqlContainer1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CosmosDbNoSql2TechCustomer",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "CosmosDbSqlApiCollection",
				"schema": {
					"type": "object",
					"properties": {
						"CustomerID": {
							"type": "integer"
						},
						"Profile": {
							"type": "object",
							"properties": {
								"FirstName": {
									"type": "string"
								},
								"LastName": {
									"type": "string"
								},
								"Email": {
									"type": "string"
								}
							}
						},
						"Conversations": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"ConversationID": {
										"type": "string"
									},
									"Messages": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"DateTime": {
													"type": "string"
												},
												"Sender": {
													"type": "string"
												},
												"Message": {
													"type": "string"
												}
											}
										}
									}
								}
							}
						}
					}
				},
				"typeProperties": {
					"collectionName": "container1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/CosmosDbNoSql2TechCustomer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CustomerCSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "historicaldata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Customers')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customer_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "first_name",
						"type": "varchar"
					},
					{
						"name": "last_name",
						"type": "varchar"
					},
					{
						"name": "primary_email",
						"type": "varchar"
					},
					{
						"name": "phone_number",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Customer"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Customers1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ProjectWarehouse",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FirstName",
						"type": "varchar"
					},
					{
						"name": "LastName",
						"type": "varchar"
					},
					{
						"name": "PrimaryEmailAddress",
						"type": "varchar"
					},
					{
						"name": "PhoneNumber",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Customer"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ProjectWarehouse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Conversations')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ProjectWarehouse",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ConversationID",
						"type": "varchar"
					},
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Conversations"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ProjectWarehouse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CustomerLoad')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CustomerCSV",
								"type": "DatasetReference"
							},
							"name": "CSVtoCustomer"
						},
						{
							"dataset": {
								"referenceName": "CosmosDbNoSqlContainer1",
								"type": "DatasetReference"
							},
							"name": "TechCustomerSupport"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Customers1",
								"type": "DatasetReference"
							},
							"name": "CustomerTableSQL"
						},
						{
							"dataset": {
								"referenceName": "Conversations",
								"type": "DatasetReference"
							},
							"name": "ConversationsTable"
						}
					],
					"transformations": [
						{
							"name": "ExtractName"
						},
						{
							"name": "NameSplit"
						},
						{
							"name": "CheckEnding"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "CustomerID"
						},
						{
							"name": "FlattenConvo"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CSVtoCustomer",
						"source(output(",
						"          CustomerID as integer,",
						"          Profile as (FirstName as string, LastName as string, Email as string),",
						"          Conversations as (ConversationID as string, Messages as (DateTime as string, Sender as string, Message as string)[])[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'document') ~> TechCustomerSupport",
						"CSVtoCustomer derive(Name = regexReplace(     case(         regexMatch(trim(toString(byName('Name'))), `^(Mr\\.|Mrs\\.|Ms\\.|Dr\\.|Prof\\.)`),         regexExtract(trim(toString(byName('Name'))), `^(Mr\\.|Mrs\\.|Ms\\.|Dr\\.|Prof\\.)\\s*(.*)`, 2),         trim(toString(byName('Name')))     ),     `( MD| DDS)$`, '' )) ~> ExtractName",
						"ExtractName derive({First Name } = split(trim(toString(byName('Name'))), ' ')[1],",
						"          {Last Name } = split(trim(toString(byName('Name'))), ' ')[2]) ~> NameSplit",
						"NameSplit derive(Email = regexReplace(toString(byName('Email')), '@.*$', '@example.com')) ~> CheckEnding",
						"CheckEnding derive(Phone = case(",
						"    length(regexReplace(toString(byName('Phone')), '[^0-9]', '')) == 10, ",
						"    regexReplace(",
						"        regexReplace(toString(byName('Phone')), '[^0-9]', ''), ",
						"        '(\\\\d{3})(\\\\d{3})(\\\\d{4})', '($1) $2-$3'",
						"    ),",
						"    ''",
						")) ~> derivedColumn1",
						"derivedColumn1 derive(CustomerID = byName('CustomerID')) ~> CustomerID",
						"TechCustomerSupport foldDown(unroll(Conversations),",
						"     mapColumn(",
						"          CustomerID,",
						"          Profile,",
						"          Conversations = Conversations.ConversationID",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenConvo",
						"FlattenConvo select(mapColumn(",
						"          CustomerID,",
						"          Conversations",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"CustomerID sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CustomerID as integer,",
						"          FirstName as string,",
						"          LastName as string,",
						"          PrimaryEmailAddress as string,",
						"          PhoneNumber as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CustomerID,",
						"          FirstName = {First Name },",
						"          LastName = {Last Name },",
						"          PrimaryEmailAddress = Email,",
						"          PhoneNumber = Phone",
						"     )) ~> CustomerTableSQL",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ConversationID as string,",
						"          CustomerID as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CustomerID,",
						"          ConversationID = Conversations",
						"     )) ~> ConversationsTable"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CustomerCSV')]",
				"[concat(variables('factoryId'), '/datasets/CosmosDbNoSqlContainer1')]",
				"[concat(variables('factoryId'), '/datasets/Customers1')]",
				"[concat(variables('factoryId'), '/datasets/Conversations')]"
			]
		}
	]
}