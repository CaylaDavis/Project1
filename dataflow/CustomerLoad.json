{
	"name": "CustomerLoad",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "CustomerCSV",
						"type": "DatasetReference"
					},
					"name": "CSVtoCustomer"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Customers",
						"type": "DatasetReference"
					},
					"name": "CustomerTableSQL"
				}
			],
			"transformations": [
				{
					"name": "ExtractName"
				},
				{
					"name": "NameSplit"
				},
				{
					"name": "CheckEnding"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> CSVtoCustomer",
				"CSVtoCustomer derive(Name = regexReplace(     case(         regexMatch(trim(toString(byName('Name'))), `^(Mr\\.|Mrs\\.|Ms\\.|Dr\\.|Prof\\.)`),         regexExtract(trim(toString(byName('Name'))), `^(Mr\\.|Mrs\\.|Ms\\.|Dr\\.|Prof\\.)\\s*(.*)`, 2),         trim(toString(byName('Name')))     ),     `( MD| DDS)$`, '' )) ~> ExtractName",
				"ExtractName derive({First Name } = split(trim(toString(byName('Name'))), ' ')[1],",
				"          {Last Name } = split(trim(toString(byName('Name'))), ' ')[2]) ~> NameSplit",
				"NameSplit derive(Email = regexReplace(toString(byName('Email')), '@.*$', '@example.com')",
				") ~> CheckEnding",
				"CheckEnding derive(Phone = case(",
				"    length(regexReplace(toString(byName('Phone')), '[^0-9]', '')) == 10, ",
				"    regexReplace(",
				"        regexReplace(toString(byName('Phone')), '[^0-9]', ''), ",
				"        '(\\\\d{3})(\\\\d{3})(\\\\d{4})', '($1) $2-$3'",
				"    ),",
				"    ''",
				")",
				") ~> derivedColumn1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          customer_id as integer,",
				"          first_name as string,",
				"          last_name as string,",
				"          primary_email as string,",
				"          phone_number as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> CustomerTableSQL"
			]
		}
	}
}