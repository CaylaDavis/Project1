{
	"name": "CustomerLoad",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "CustomerCSV",
						"type": "DatasetReference"
					},
					"name": "CSVtoCustomer"
				},
				{
					"dataset": {
						"referenceName": "CosmosDbNoSqlContainer1",
						"type": "DatasetReference"
					},
					"name": "TechCustomerSupport"
				},
				{
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Customers1",
						"type": "DatasetReference"
					},
					"name": "CustomerTableSQL"
				},
				{
					"dataset": {
						"referenceName": "CosmosDbNoSqlContainer1",
						"type": "DatasetReference"
					},
					"name": "ConversationsTable"
				}
			],
			"transformations": [
				{
					"name": "ExtractName"
				},
				{
					"name": "NameSplit"
				},
				{
					"name": "CheckEnding"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "CustomerID"
				},
				{
					"name": "FlattenConvo"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> CSVtoCustomer",
				"source(output(",
				"          CustomerID as integer,",
				"          Profile as (FirstName as string, LastName as string, Email as string),",
				"          Conversations as (ConversationID as string, Messages as (DateTime as string, Sender as string, Message as string)[])[]",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'document') ~> TechCustomerSupport",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false) ~> source1",
				"CSVtoCustomer derive(Name = regexReplace(     case(         regexMatch(trim(toString(byName('Name'))), `^(Mr\\.|Mrs\\.|Ms\\.|Dr\\.|Prof\\.)`),         regexExtract(trim(toString(byName('Name'))), `^(Mr\\.|Mrs\\.|Ms\\.|Dr\\.|Prof\\.)\\s*(.*)`, 2),         trim(toString(byName('Name')))     ),     `( MD| DDS)$`, '' )) ~> ExtractName",
				"ExtractName derive({First Name } = split(trim(toString(byName('Name'))), ' ')[1],",
				"          {Last Name } = split(trim(toString(byName('Name'))), ' ')[2]) ~> NameSplit",
				"NameSplit derive(Email = regexReplace(toString(byName('Email')), '@.*$', '@example.com')) ~> CheckEnding",
				"CheckEnding derive(Phone = case(",
				"    length(regexReplace(toString(byName('Phone')), '[^0-9]', '')) == 10, ",
				"    regexReplace(",
				"        regexReplace(toString(byName('Phone')), '[^0-9]', ''), ",
				"        '(\\\\d{3})(\\\\d{3})(\\\\d{4})', '($1) $2-$3'",
				"    ),",
				"    ''",
				")) ~> derivedColumn1",
				"derivedColumn1 derive(CustomerID = byName('CustomerID')) ~> CustomerID",
				"TechCustomerSupport foldDown(unroll(Conversations),",
				"     mapColumn(",
				"          CustomerID,",
				"          Profile,",
				"          Conversations = Conversations.ConversationID",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> FlattenConvo",
				"FlattenConvo select(mapColumn(",
				"          CustomerID,",
				"          Conversations",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"CustomerID sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CustomerID as integer,",
				"          FirstName as string,",
				"          LastName as string,",
				"          PrimaryEmailAddress as string,",
				"          PhoneNumber as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          CustomerID,",
				"          FirstName = {First Name },",
				"          LastName = {Last Name },",
				"          PrimaryEmailAddress = Email,",
				"          PhoneNumber = Phone",
				"     )) ~> CustomerTableSQL",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CustomerID as integer,",
				"          Profile as (FirstName as string, LastName as string, Email as string),",
				"          Conversations as (ConversationID as string, Messages as (DateTime as string, Sender as string, Message as string)[])[]",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'document',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> ConversationsTable"
			]
		}
	}
}